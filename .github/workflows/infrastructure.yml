name: Infrastructure CI/CD Pipeline

on:
  push:
    branches: [ main, dev, uat ]
    paths:
      - 'infra/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - uat
        - prod

env:
  TF_VERSION: '1.9.2'
  HELM_VERSION: '3.12.0'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    strategy:
      matrix:
        environment: [dev, uat, prod]
      fail-fast: false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./infra/terraform
      
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ./infra/terraform/environments/${{ matrix.environment == 'uat' && 'staging' || matrix.environment }}
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra/terraform/environments/${{ matrix.environment == 'uat' && 'staging' || matrix.environment }}
      
    - name: Terraform Plan
      run: |
        if [ "${{ matrix.environment }}" = "dev" ]; then
          terraform plan -var-file="dev.tfvars" -out=tfplan
        elif [ "${{ matrix.environment }}" = "uat" ]; then
          terraform plan -var-file="staging.tfvars" -out=tfplan
        else
          terraform plan -var-file="prod.tfvars" -out=tfplan
        fi
      working-directory: ./infra/terraform/environments/${{ matrix.environment == 'uat' && 'staging' || matrix.environment }}
      
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: ./infra/terraform/environments/${{ matrix.environment }}/tfplan

  terraform-security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: ./infra/terraform
        soft_fail: true
        
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./infra/terraform
        framework: terraform
        soft_fail: true

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Helm Lint Orchestrator
      run: helm lint ./infra/helm/orchestrator
      
    - name: Helm Lint Evidence Worker
      run: helm lint ./infra/helm/evidence-worker
      
    - name: Helm Template Test
      run: |
        helm template orchestrator ./infra/helm/orchestrator
        helm template evidence-worker ./infra/helm/evidence-worker

  terraform-apply-dev:
    name: Terraform Apply (Dev)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: dev
    needs: [terraform-plan, terraform-security-scan]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure Azure Credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra/terraform/environments/dev
      
    - name: Terraform Apply
      run: terraform apply -var-file="dev.tfvars" -auto-approve
      working-directory: ./infra/terraform/environments/dev
      
    - name: Output Infrastructure Info
      run: |
        echo "## Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Development" >> $GITHUB_STEP_SUMMARY
        echo "- Region: Central India" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY

  terraform-apply-uat:
    name: Terraform Apply (UAT)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/uat' && github.event_name == 'push'
    environment: uat
    needs: [terraform-plan, terraform-security-scan]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure Azure Credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra/terraform/environments/staging
      
    - name: Terraform Apply
      run: terraform apply -var-file="staging.tfvars" -auto-approve
      working-directory: ./infra/terraform/environments/staging
      
    - name: Output Infrastructure Info
      run: |
        echo "## Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: UAT/Staging" >> $GITHUB_STEP_SUMMARY
        echo "- Region: West Europe" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY

  terraform-apply-prod:
    name: Terraform Apply (Production)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    needs: [terraform-plan, terraform-security-scan]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure Azure Credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
        
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra/terraform/environments/prod
      
    - name: Terraform Plan (Production)
      run: terraform plan -var-file="prod.tfvars" -out=tfplan
      working-directory: ./infra/terraform/environments/prod
      
    - name: Manual Approval Required
      run: |
        echo "## Production Deployment Approval Required" >> $GITHUB_STEP_SUMMARY
        echo "This is a production deployment. Manual approval is required." >> $GITHUB_STEP_SUMMARY
        echo "Please review the Terraform plan and approve the deployment." >> $GITHUB_STEP_SUMMARY
      
    - name: Terraform Apply (Production)
      run: terraform apply tfplan
      working-directory: ./infra/terraform/environments/prod
      
    - name: Output Infrastructure Info
      run: |
        echo "## Production Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
        echo "- Region: Multiple (India, EU, US)" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY

  helm-deploy-dev:
    name: Helm Deploy (Dev)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: dev
    needs: [terraform-apply-dev]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Configure Azure Credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group rg-revai-dev --name revai-dev-aks --overwrite-existing
        
    - name: Create Namespace
      run: kubectl create namespace revai --dry-run=client -o yaml | kubectl apply -f -
      
    - name: Deploy Orchestrator
      run: |
        helm upgrade --install orchestrator ./infra/helm/orchestrator \
          --namespace revai \
          --set image.tag=${{ github.sha }} \
          --set secrets.postgresql_password=${{ secrets.POSTGRESQL_PASSWORD }} \
          --set secrets.redis_password=${{ secrets.REDIS_PASSWORD }} \
          --set secrets.jwt_secret=${{ secrets.JWT_SECRET }}
          
    - name: Deploy Evidence Worker
      run: |
        helm upgrade --install evidence-worker ./infra/helm/evidence-worker \
          --namespace revai \
          --set image.tag=${{ github.sha }} \
          --set secrets.postgresql_password=${{ secrets.POSTGRESQL_PASSWORD }} \
          --set secrets.redis_password=${{ secrets.REDIS_PASSWORD }} \
          --set secrets.jwt_secret=${{ secrets.JWT_SECRET }}
          
    - name: Verify Deployment
      run: |
        kubectl get pods -n revai
        kubectl get services -n revai

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ./infra/terraform/environments/dev
      
    - name: Terraform Plan for Cost Analysis
      run: terraform plan -var-file="dev.tfvars" -out=tfplan
      working-directory: ./infra/terraform/environments/dev
      
    - name: Generate Cost Report
      run: |
        echo "## Cost Impact Analysis" >> $GITHUB_STEP_SUMMARY
        echo "### Resources to be created/modified:" >> $GITHUB_STEP_SUMMARY
        terraform show -no-color tfplan | grep -E "^(Plan:|#)" >> $GITHUB_STEP_SUMMARY || true
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note**: Actual costs may vary based on usage patterns." >> $GITHUB_STEP_SUMMARY
      working-directory: ./infra/terraform/environments/dev
