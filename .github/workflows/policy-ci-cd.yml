# ================================================================================
# Policy Pack CI/CD Pipeline
# ================================================================================
# This pipeline validates Open Policy Agent (OPA) policies with:
# - Unit tests for policy rules
# - Simulated evaluation harness
# - Policy validation and linting
# ================================================================================

name: Policy Pack CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'policies/**'
      - 'tests/**'
      - 'policy-harness.yaml'
      - '.github/workflows/policy-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'policies/**'
      - 'tests/**'
      - 'policy-harness.yaml'
      - '.github/workflows/policy-ci-cd.yml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - harness

env:
  OPA_VERSION: '0.58.0'

permissions:
  contents: read
  security-events: write

jobs:
  # ================================================================================
  # Policy Linting and Validation
  # ================================================================================
  policy-lint:
    name: Policy Lint and Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
        chmod +x opa
        sudo mv opa /usr/local/bin/
        
    - name: Validate Policy Syntax
      run: |
        echo "Validating policy syntax..."
        for policy in policies/*.rego; do
          if [ -f "$policy" ]; then
            echo "Validating $policy"
            opa check "$policy" || exit 1
          fi
        done
        
    - name: Policy Linting
      run: |
        echo "Running policy linting..."
        opa fmt --diff policies/ || exit 1
        
    - name: Format Policies
      run: |
        echo "Formatting policies..."
        opa fmt --write policies/

  # ================================================================================
  # Policy Unit Tests
  # ================================================================================
  policy-unit-tests:
    name: Policy Unit Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    needs: [policy-lint]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
        chmod +x opa
        sudo mv opa /usr/local/bin/
        
    - name: Run Policy Unit Tests
      run: |
        echo "Running policy unit tests..."
        if [ -d "tests" ]; then
          opa test tests/ --verbose --coverage
        else
          echo "No tests directory found, creating sample test..."
          mkdir -p tests
          cat > tests/sample_test.rego << 'EOF'
        package test
        
        import data.policies
        
        test_allow_valid_input {
          policies.allow with input as {"user": "alice", "action": "read", "resource": "data"}
        }
        
        test_deny_invalid_input {
          not policies.allow with input as {"user": "bob", "action": "write", "resource": "data"}
        }
        EOF
          opa test tests/ --verbose
        fi
        
    - name: Generate Test Coverage Report
      run: |
        echo "Generating test coverage report..."
        opa test tests/ --coverage --format=json > coverage.json || true
        opa test tests/ --coverage --format=table || true

  # ================================================================================
  # Policy Evaluation Harness
  # ================================================================================
  policy-harness:
    name: Policy Evaluation Harness
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    needs: [policy-unit-tests]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
        chmod +x opa
        sudo mv opa /usr/local/bin/
        
    - name: Create Sample Policy Harness
      run: |
        if [ ! -f "policy-harness.yaml" ]; then
          echo "Creating sample policy harness..."
          cat > policy-harness.yaml << 'EOF'
        # Sample Policy Evaluation Harness
        scenarios:
          - name: "Valid User Access"
            input:
              user: "alice"
              action: "read"
              resource: "data"
              environment: "production"
            expected: true
            
          - name: "Invalid User Access"
            input:
              user: "bob"
              action: "write"
              resource: "sensitive-data"
              environment: "production"
            expected: false
            
          - name: "Admin Override"
            input:
              user: "admin"
              action: "write"
              resource: "any-resource"
              environment: "production"
            expected: true
        EOF
        fi
        
    - name: Run Policy Evaluation Harness
      run: |
        echo "Running policy evaluation harness..."
        if [ -f "policy-harness.yaml" ]; then
          # Extract scenarios and run evaluations
          python3 << 'EOF'
        import yaml
        import subprocess
        import sys
        
        with open('policy-harness.yaml', 'r') as f:
            harness = yaml.safe_load(f)
            
        scenarios = harness.get('scenarios', [])
        failed_tests = []
        
        for scenario in scenarios:
            name = scenario['name']
            input_data = scenario['input']
            expected = scenario['expected']
            
            print(f"Running scenario: {name}")
            
            # Run OPA evaluation
            cmd = [
                'opa', 'eval',
                '--data', 'policies/',
                '--input', '-',
                '--format', 'raw',
                'data.policies.allow'
            ]
            
            try:
                result = subprocess.run(
                    cmd,
                    input=yaml.dump(input_data),
                    text=True,
                    capture_output=True,
                    check=True
                )
                
                actual = result.stdout.strip().lower() == 'true'
                
                if actual == expected:
                    print(f"✅ {name}: PASS")
                else:
                    print(f"❌ {name}: FAIL (expected {expected}, got {actual})")
                    failed_tests.append(name)
                    
            except subprocess.CalledProcessError as e:
                print(f"❌ {name}: ERROR - {e.stderr}")
                failed_tests.append(name)
        
        if failed_tests:
            print(f"\nFailed tests: {', '.join(failed_tests)}")
            sys.exit(1)
        else:
            print("\n✅ All policy harness tests passed!")
        EOF
        else
          echo "No policy harness found, skipping evaluation"
        fi

  # ================================================================================
  # Policy Security Scan
  # ================================================================================
  policy-security-scan:
    name: Policy Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    needs: [policy-harness]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
        chmod +x opa
        sudo mv opa /usr/local/bin/
        
    - name: Security Analysis
      run: |
        echo "Running security analysis on policies..."
        
        # Check for dangerous functions
        echo "Checking for dangerous functions..."
        grep -r "http.send\|net.lookup_hostname\|io.jwt.decode" policies/ || echo "No dangerous functions found"
        
        # Check for hardcoded secrets
        echo "Checking for hardcoded secrets..."
        grep -r -i "password\|secret\|key\|token" policies/ || echo "No hardcoded secrets found"
        
        # Validate policy structure
        echo "Validating policy structure..."
        opa check policies/ --strict || echo "Policy structure validation completed"
        
    - name: Policy Complexity Analysis
      run: |
        echo "Analyzing policy complexity..."
        for policy in policies/*.rego; do
          if [ -f "$policy" ]; then
            echo "Analyzing $policy"
            lines=$(wc -l < "$policy")
            rules=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*(" "$policy" || echo "0")
            echo "  Lines: $lines, Rules: $rules"
          fi
        done

  # ================================================================================
  # Policy Documentation Generation
  # ================================================================================
  policy-docs:
    name: Policy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    needs: [policy-security-scan]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
        chmod +x opa
        sudo mv opa /usr/local/bin/
        
    - name: Generate Policy Documentation
      run: |
        echo "Generating policy documentation..."
        mkdir -p docs
        
        # Generate policy overview
        cat > docs/policies.md << 'EOF'
        # Policy Pack Documentation
        
        ## Overview
        This document describes the policies in this policy pack.
        
        ## Policies
        
        EOF
        
        # Add each policy to documentation
        for policy in policies/*.rego; do
          if [ -f "$policy" ]; then
            policy_name=$(basename "$policy" .rego)
            echo "### $policy_name" >> docs/policies.md
            echo "" >> docs/policies.md
            
            # Extract comments and add to docs
            grep "^//" "$policy" | sed 's/^\/\/ /- /' >> docs/policies.md || true
            echo "" >> docs/policies.md
          fi
        done
        
    - name: Upload Documentation
      uses: actions/upload-artifact@v4
      with:
        name: policy-docs
        path: docs/
        retention-days: 30
