# ================================================================================
# Multi-stage Dockerfile Template for Microservices
# ================================================================================
# This template supports multiple languages and provides:
# - Security hardening
# - Multi-stage builds for smaller images
# - Health checks
# - Non-root user execution
# ================================================================================

# Build stage for Node.js applications
FROM node:18-alpine AS node-builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force
COPY src/ ./src/
RUN npm run build || echo "No build script found"

# Build stage for Python applications
FROM python:3.11-slim AS python-builder
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY src/ ./src/

# Build stage for Go applications
FROM golang:1.21-alpine AS go-builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY src/ ./src/
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./src/

# Build stage for Java applications
FROM maven:3.9-openjdk-17-slim AS java-builder
WORKDIR /app
COPY pom.xml .
RUN mvn dependency:go-offline -B
COPY src/ ./src/
RUN mvn clean package -DskipTests

# Runtime stage
FROM alpine:3.18

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache ca-certificates tzdata && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1000 appgroup && \
    adduser -u 1000 -G appgroup -s /bin/sh -D appuser

# Set working directory
WORKDIR /app

# Copy application based on detected language
# Node.js
COPY --from=node-builder --chown=appuser:appgroup /app/node_modules ./node_modules
COPY --from=node-builder --chown=appuser:appgroup /app/dist ./dist
COPY --from=node-builder --chown=appuser:appgroup /app/package*.json ./

# Python
COPY --from=python-builder --chown=appuser:appgroup /app/src ./src
COPY --from=python-builder --chown=appuser:appgroup /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Go
COPY --from=go-builder --chown=appuser:appgroup /app/main ./

# Java
COPY --from=java-builder --chown=appuser:appgroup /app/target/*.jar app.jar

# Set environment variables
ENV NODE_ENV=production
ENV PYTHONUNBUFFERED=1
ENV PORT=8080

# Expose port
EXPOSE 8080

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command (override in deployment)
CMD ["sh", "-c", "if [ -f package.json ]; then npm start; elif [ -f requirements.txt ]; then python -m src.main; elif [ -f main ]; then ./main; elif [ -f app.jar ]; then java -jar app.jar; else echo 'No application found'; fi"]
